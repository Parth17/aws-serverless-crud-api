org: parthaws17
service:
  name: aws-serverless-crud-api

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
    - dev

plugins:
  - serverless-webpack
  #1
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  #2
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    #3
    USERDTLS_TABLE: USERDTLS-${self:provider.stage}

functions:
  #4
  createUserDtls:
    handler: src/functions/UserDtlsLambdas/CreateUserDtls.ts.handler
    events:
      - http:
          method: post
          path: userdtls
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERDTLS_TABLE}

  GetUserDtls:
    handler: src/functions/UserDtlsLambdas/GetUserDtls.handler
    events:
    - http:
        method: get
        path: userdtls
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERDTLS_TABLE}

  UpdateUserDtls:
    handler: src/functions/UserDtlsLambdas/UpdateUserDtls.handler
    events:
    - http:
        method: patch
        path: userdtls/{id}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERDTLS_TABLE}

  DeleteTodo:
    handler: src/functions/UserDtlsLambdas/DeleteUserDtls.handler
    events:
    - http:
        method: delete
        path: userdtls/{id}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERDTLS_TABLE}
      
#5
resources: # CloudFormation template syntax
  Resources: 
    UserdtlsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERDTLS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # AWS Free tier
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # For production I'll recommend you to use this one instead, so you pay only for what you use
        # BillingMode: PAY_PER_REQUEST
